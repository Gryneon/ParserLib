<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Parser.Binary</name>
    </assembly>
    <members>
        <member name="T:Parser.Binary.ByteParser">
            <summary>
            A parser that reads binary files.
            </summary>
            <param name="bytes">The raw file data.</param>
            <param name="spec">The spec to use.</param>
        </member>
        <member name="M:Parser.Binary.ByteParser.#ctor(System.Byte[],Parser.Spec)">
            <summary>
            A parser that reads binary files.
            </summary>
            <param name="bytes">The raw file data.</param>
            <param name="spec">The spec to use.</param>
        </member>
        <member name="P:Parser.Binary.ByteParser.OpCount">
            <summary>
            The total operation count.
            </summary>
        </member>
        <member name="P:Parser.Binary.ByteParser.CurrentOp">
            <summary>
            The current operation.
            </summary>
        </member>
        <member name="P:Parser.Binary.ByteParser.LastStatus">
            <summary>
            The last status from the last operation executed.
            </summary>
        </member>
        <member name="P:Parser.Binary.ByteParser.OpIndex">
            <summary>
            The current operation index.
            </summary>
        </member>
        <member name="F:Parser.Binary.ByteParser._fileContents">
            <summary>
            The loaded binary file.
            </summary>
        </member>
        <member name="P:Parser.Binary.ByteParser.ByteObjects">
            <summary>
            The data stored from the file.
            </summary>
        </member>
        <member name="P:Parser.Binary.ByteParser.BytePos">
            <summary>
            The current position in the binary file.
            </summary>
        </member>
        <member name="P:Parser.Binary.ByteParser.Spec">
            <summary>
            The loaded specification.
            </summary>
        </member>
        <member name="M:Parser.Binary.ByteParser.Parse(System.Byte[])">
            <summary>
            Parses the provided binary data.
            </summary>
            <param name="bytes">The binary data.</param>
            <returns><see cref="F:Parser.OpStatus.Pass"/> if successful, or an error code.</returns>
        </member>
        <member name="M:Parser.Binary.ByteParser.Parse">
            <summary>
            Parses the provided binary data.
            </summary>
            <returns><see cref="F:Parser.OpStatus.Pass"/> if successful, or an error code.</returns>
        </member>
        <member name="T:Parser.Binary.Ops.ByteLoadDataOperationLoop">
            <summary>
            Represents an iterative loop, like to get objects from an archive, or read pixels.
            This one loads the count from the number of objects in the collection stored in the count key provided.
            </summary>
            <param name="count_varname">The key that has the count stored.</param>
            <param name="ops_loop">The operations to iterate through.</param>
        </member>
        <member name="M:Parser.Binary.Ops.ByteLoadDataOperationLoop.#ctor(System.String,System.Collections.Generic.IEnumerable{Parser.Binary.Ops.ByteOperation})">
            <summary>
            Represents an iterative loop, like to get objects from an archive, or read pixels.
            This one loads the count from the number of objects in the collection stored in the count key provided.
            </summary>
            <param name="count_varname">The key that has the count stored.</param>
            <param name="ops_loop">The operations to iterate through.</param>
        </member>
        <member name="M:Parser.Binary.Ops.ByteLoadDataOperationLoop.GetCount">
            <summary>
            Gets the number of iterations this loop does.
            </summary>
            <returns>The </returns>
        </member>
        <member name="T:Parser.Binary.Ops.ByteLoadIndexOperationLoop">
            <summary>
            Represents an iterative loop, like to get objects from an archive, or read pixels.
            This one loads the count from the count key provided.
            </summary>
            <param name="count_varname">The key to count the values from.</param>
            <param name="ops_loop">The operations to iterate through</param>
        </member>
        <member name="M:Parser.Binary.Ops.ByteLoadIndexOperationLoop.#ctor(System.String,System.Collections.Generic.IEnumerable{Parser.Binary.Ops.ByteOperation})">
            <summary>
            Represents an iterative loop, like to get objects from an archive, or read pixels.
            This one loads the count from the count key provided.
            </summary>
            <param name="count_varname">The key to count the values from.</param>
            <param name="ops_loop">The operations to iterate through</param>
        </member>
        <member name="T:Parser.Binary.Ops.ByteOperation">
            <summary>
            Base class for all byte operations. must expose parser, do not use other methods.
            </summary>
        </member>
        <member name="M:Parser.Binary.Ops.ByteOperation.#ctor(System.String,System.String)">
            <summary>
            Base class for all byte operations. must expose parser, do not use other methods.
            </summary>
        </member>
        <member name="M:Parser.Binary.Ops.ByteOperation.DoOperation(System.Object@)">
            <summary>Do not use.</summary>
            <returns>Throws exception.</returns>
            <exception cref="T:Parser.UnknownOperationException"></exception>
        </member>
        <member name="M:Parser.Binary.Ops.ByteOperation.DoOperation(Parser.Binary.ByteParser)">
            <summary>
            Performs an operation that uses and may alter or reassign the data.
            </summary>
            <returns>
            <see cref="F:Parser.OpStatus.Error"/> : The operation encountered a fatal error.<br/>
            <see cref="F:Parser.OpStatus.Pass"/> : The operation completed.<br/>
            <see cref="F:Parser.OpStatus.Skipped"/> : The operation was skipped or not executed. <br/>
            <c>Unused: </c><see cref="F:Parser.OpStatus.FailBadInputNull"/> : The operation was given a null value. <br/>
            <see cref="F:Parser.OpStatus.FailBadInputType"/> : The operation was given an incompatible object as input. <br/>
            <see cref="F:Parser.OpStatus.FailBadOpDefinition"/> : The operation or specification definition has an error or is not valid. <br/>
            <see cref="F:Parser.OpStatus.FailBadOpImpossible"/> : The operation reached an impossible statement. <br/>
            <see cref="F:Parser.OpStatus.FailNullOpResult"/> : The operation resulted in a null value. <br/>
            <see cref="F:Parser.OpStatus.FailBufferOverflow"/> : The operation advanced beyond the EOL of the input. <br/>
            <see cref="F:Parser.OpStatus.FailNoSuchVarName"/> : The operation was supplied an invalid key.<br/>
            <see cref="F:Parser.OpStatus.FailNoSpec"/> : The operation does not have a valid <see cref="T:Parser.Spec"/>.<br/>
            <see cref="F:Parser.OpStatus.EndCommand"/> : The operation completed and was the final operation. <br/>
            <see cref="F:Parser.OpStatus.NoData"/> : No data was passed, but not a failure. <br/>
            </returns>
            <exception cref="T:Parser.UnknownOperationException"></exception>
        </member>
        <member name="T:Parser.Binary.Ops.ByteOperationLoop">
            <summary>
            Represents an iterative loop, like to get objects from an archive, or read pixels.
            </summary>
            <param name="count">The key that determines the loop count.</param>
            <param name="ops_loop">The operations to preform in this loop.</param>
        </member>
        <member name="M:Parser.Binary.Ops.ByteOperationLoop.#ctor(System.String,System.Collections.Generic.IEnumerable{Parser.Binary.Ops.ByteOperation})">
            <summary>
            Represents an iterative loop, like to get objects from an archive, or read pixels.
            </summary>
            <param name="count">The key that determines the loop count.</param>
            <param name="ops_loop">The operations to preform in this loop.</param>
        </member>
    </members>
</doc>
