<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Specification.IPL</name>
    </assembly>
    <members>
        <member name="T:Specification.IPL.IPLExtensions">
            <summary>
            Extensions for this Spec.
            </summary>
        </member>
        <member name="M:Specification.IPL.IPLExtensions.ToCommandData(Common.Regex.MatchData)">
            <summary>
            Converts this <see cref="T:Common.Regex.MatchData"/> into a <see cref="T:Specification.IPL.CommandData"/> object.
            </summary>
            <param name="mdd">The match data to use.</param>
            <returns>A <see cref="T:Specification.IPL.CommandData"/> object.</returns>
        </member>
        <member name="T:Specification.IPL.CommandData">
            <summary>
            Contains the details of an IPL command.
            </summary>
        </member>
        <member name="P:Specification.IPL.CommandData.ParseData">
            <summary>
            The data that created this object.
            </summary>
        </member>
        <member name="P:Specification.IPL.CommandData.FullCommandText">
            <summary>
            The full text representation of this object at creation.
            </summary>
        </member>
        <member name="P:Specification.IPL.CommandData.IsEscaped">
            <summary>
            <see langword="true"/> if the command was escaped, <see langword="false"/> otherwise.
            </summary>
        </member>
        <member name="P:Specification.IPL.CommandData.IsShifted">
            <summary>
            <see langword="true"/> if the command was shifted, <see langword="false"/> otherwise.
            </summary>
        </member>
        <member name="P:Specification.IPL.CommandData.CmdLetter">
            <summary>
            The command executed.
            </summary>
        </member>
        <member name="P:Specification.IPL.CommandData.PrintQty">
            <summary>
            The number of labels to print in sequence.
            </summary>
        </member>
        <member name="P:Specification.IPL.CommandData.BatchPrintQty">
            <summary>
            The number of labels to print in each set.
            </summary>
        </member>
        <member name="P:Specification.IPL.CommandData.FieldNum">
            <summary>
            The field number defined for this field data.
            </summary>
        </member>
        <member name="P:Specification.IPL.CommandData.Data">
            <summary>
            The data attached to this command.
            </summary>
        </member>
        <member name="P:Specification.IPL.CommandData.Properties">
            <summary>
            The properties assigned to a line command.
            </summary>
        </member>
        <member name="P:Specification.IPL.CommandData.Count">
            <inheritdoc/>
        </member>
        <member name="P:Specification.IPL.CommandData.Format">
            <summary>
            The format the command was called in.
            </summary>
        </member>
        <member name="P:Specification.IPL.CommandData.Mode">
            <summary>
            The mode that the command was called in.
            </summary>
        </member>
        <member name="P:Specification.IPL.CommandData.CmdMode">
            <summary>
            The mode that this command assigns, if any.
            </summary>
        </member>
        <member name="P:Specification.IPL.CommandData.Type">
            <summary>
            The command type.
            </summary>
        </member>
        <member name="M:Specification.IPL.CommandData.#ctor">
            <summary>
            Creates an empty object. IsNull would equal <see langword="true"/>.
            </summary>
        </member>
        <member name="M:Specification.IPL.CommandData.#ctor(Common.Regex.MatchData)">
            <summary>
            Creates an object from a <see cref="T:Common.Regex.MatchData"/>. IsNull would equal <see langword="false"/>.
            </summary>
            <param name="mdd">The <see cref="T:Common.Regex.MatchData"/> to create an object from.</param>
        </member>
        <member name="M:Specification.IPL.CommandData.#ctor(System.String)">
            <summary>
            Creates an object from a <see cref="T:System.String"/>. IsNull would equal <see langword="false"/>.
            </summary>
            <param name="fullcmdstr">The <see cref="T:System.String"/> to create an object from.</param>
        </member>
        <member name="P:Specification.IPL.CommandData.Item(System.Int32)">
            <summary>
            Gets or sets the data associated with this command.
            </summary>
            <param name="index">The data index.</param>
            <returns>The data at the given index.</returns>
        </member>
        <member name="P:Specification.IPL.CommandData.IsNull">
            <summary>
            <see langword="true"/> if the command is empty. <see langword="false"/> otherwise.
            </summary>
        </member>
        <member name="M:Specification.IPL.CommandData.GetTextData(System.Int32)">
            <summary>
            Gets the data field at the given index as a <see langword="string"/>.
            </summary>
            <param name="index">The data index to access.</param>
            <returns>The data at the given index as a <see langword="string"/>.</returns>
        </member>
        <member name="M:Specification.IPL.CommandData.GetIntData(System.Int32)">
            <summary>
            Gets the data field at the given index as an <see langword="int"/>.
            </summary>
            <param name="index">The data index to access.</param>
            <returns>The data at the given index as an <see langword="int"/>.</returns>
        </member>
        <member name="M:Specification.IPL.CommandData.GetDecimalData(System.Int32)">
            <summary>
            Gets the data field at the given index as a <see langword="decimal"/>.
            </summary>
            <param name="index">The data index to access.</param>
            <returns>The data at the given index as a <see langword="decimal"/>.</returns>
        </member>
        <member name="M:Specification.IPL.CommandData.SetData(System.Int32,System.Object)">
            <summary>
            Sets data at the given index to the specified value.
            </summary>
            <param name="index">The index to assign to.</param>
            <param name="data">The value to assign.</param>
        </member>
        <member name="M:Specification.IPL.CommandData.Add(Specification.IPL.CommandData)">
            <summary>
            Embeds a command inside of this command.
            </summary>
            <param name="data">The command to embed.</param>
        </member>
        <member name="M:Specification.IPL.CommandData.Equals(Specification.IPL.CommandData)">
            <inheritdoc/>
        </member>
        <member name="M:Specification.IPL.CommandData.CompareTo(Specification.IPL.CommandData)">
            <inheritdoc/>
        </member>
        <member name="M:Specification.IPL.CommandData.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Specification.IPL.CommandData.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Specification.IPL.CommandData.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Specification.IPL.CommandData.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Specification.IPL.CommandData.Serialize">
            <inheritdoc/>
        </member>
        <member name="M:Specification.IPL.CommandData.Generate(Common.Regex.MatchData)">
            <inheritdoc/>
        </member>
        <member name="M:Specification.IPL.CommandData.SetParseData(Common.Regex.MatchData)">
            <inheritdoc/>
        </member>
        <member name="M:Specification.IPL.CommandData.op_Equality(Specification.IPL.CommandData,Specification.IPL.CommandData)">
            <summary>
            Checks basic equality with another CommonData object.
            </summary>
            <param name="left">The left object.</param>
            <param name="right">The right object.</param>
            <returns><see langword="true"/> if left equals right, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Specification.IPL.CommandData.op_Inequality(Specification.IPL.CommandData,Specification.IPL.CommandData)">
            <summary>
            Checks basic inequality with another CommonData object.
            </summary>
            <param name="left">The left object.</param>
            <param name="right">The right object.</param>
            <returns><see langword="true"/> if left does not equal right, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Specification.IPL.CommandData.op_LessThan(Specification.IPL.CommandData,Specification.IPL.CommandData)">
            <summary>
            TODO: Doc
            </summary>
        </member>
        <member name="M:Specification.IPL.CommandData.op_LessThanOrEqual(Specification.IPL.CommandData,Specification.IPL.CommandData)">
            <summary>
            TODO: Doc
            </summary>
        </member>
        <member name="M:Specification.IPL.CommandData.op_GreaterThan(Specification.IPL.CommandData,Specification.IPL.CommandData)">
            <summary>
            TODO: Doc
            </summary>
        </member>
        <member name="M:Specification.IPL.CommandData.op_GreaterThanOrEqual(Specification.IPL.CommandData,Specification.IPL.CommandData)">
            <summary>
            TODO: Doc
            </summary>
        </member>
        <member name="P:Specification.IPL.Definition.Splits">
            <summary>
            <para>Command Splitter Regex</para>
            Build from https://regex101.com/r/WJUiK8/2
            </summary>
        </member>
        <member name="F:Specification.IPL.Definition.Qty">
            <summary>
            <para>Command Reader Regex</para>
            Built from https://regex101.com/r/dGDxqF/1
            </summary>
        </member>
        <member name="F:Specification.IPL.Definition.Simple">
            <summary>
            <para>Command Reader Regex</para>
            Built from https://regex101.com/r/dGDxqF/1
            </summary>
        </member>
        <member name="F:Specification.IPL.Definition.Adv">
            <summary>
            <para>Command Reader Regex</para>
            Built from https://regex101.com/r/dGDxqF/1
            </summary>
        </member>
        <member name="F:Specification.IPL.Definition.Field">
            <summary>
            <para>Command Reader Regex</para>
            Built from https://regex101.com/r/dGDxqF/1
            </summary>
        </member>
        <member name="F:Specification.IPL.Definition.Text">
            <summary>
            <para>Command Reader Regex</para>
            Built from https://regex101.com/r/dGDxqF/1
            </summary>
        </member>
        <member name="F:Specification.IPL.Definition.Default">
            <summary>
            <para>Command Reader Regex</para>
            Built from https://regex101.com/r/dGDxqF/1
            </summary>
        </member>
        <member name="F:Specification.IPL.Definition.FieldText">
            <summary>
            <para>Command Reader Regex</para>
            Built from https://regex101.com/r/dGDxqF/1
            </summary>
        </member>
        <member name="T:Specification.IPL.InvalidCommandException">
            <summary>
            Exception that is thrown when a command is executed in the wrong mode.
            </summary>
        </member>
        <member name="M:Specification.IPL.InvalidCommandException.#ctor">
            <summary>
            Creates the default <see cref="T:Specification.IPL.InvalidCommandException"/>.
            </summary>
        </member>
        <member name="M:Specification.IPL.InvalidCommandException.#ctor(System.String)">
            <summary>
            Creates a <see cref="T:Specification.IPL.InvalidCommandException"/> that includes the offending command.
            </summary>
            <param name="cmd_type">The command type.</param>
        </member>
        <member name="T:Specification.IPL.IPLCommandOperation">
            <summary>
            An operation that fills out the mode, format, and field numbers.
            </summary>
        </member>
        <member name="M:Specification.IPL.IPLCommandOperation.#ctor(System.String,System.String)">
            <summary>
            An operation that fills out the mode, format, and field numbers.
            </summary>
        </member>
        <member name="M:Specification.IPL.IPLCommandOperation.Execute">
            <inheritdoc/>
        </member>
        <member name="T:Specification.IPL.IPLCommandTemplate">
            <summary>
            Represents a command to compare.
            </summary>
        </member>
        <member name="P:Specification.IPL.IPLCommandTemplate.CmdType">
            <summary>
            The command type.
            </summary>
        </member>
        <member name="P:Specification.IPL.IPLCommandTemplate.IsEscaped">
            <summary>
            Is the command escaped?
            </summary>
        </member>
        <member name="P:Specification.IPL.IPLCommandTemplate.IsShifted">
            <summary>
            Is the command shifted?
            </summary>
        </member>
        <member name="M:Specification.IPL.IPLCommandTemplate.Equals(Specification.IPL.IPLCommandTemplate)">
            <summary>
            Checks equality against another object.
            </summary>
            <param name="other">The other object</param>
            <returns><see langword="true"/> if the objects are the same command, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Specification.IPL.IPLCommandTemplate.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Specification.IPL.IPLCommandTemplate.ToString">
            <summary>
            Gets the basic command formatted as readable text.
            </summary>
            <returns>The basic command formatted as readable text.</returns>
        </member>
        <member name="M:Specification.IPL.IPLCommandTemplate.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Specification.IPL.IPLCommandTemplate.Serialize">
            <inheritdoc/>
        </member>
        <member name="P:Specification.IPL.IPLCommandTemplate.Empty">
            <summary>
            An empty or null command.
            </summary>
        </member>
        <member name="M:Specification.IPL.IPLCommandTemplate.op_Equality(Specification.IPL.IPLCommandTemplate,Specification.IPL.IPLCommandTemplate)">
            <summary>
            Checks equality of 2 command objects.
            </summary>
            <param name="left">The lefthand object.</param>
            <param name="right">The righthand object.</param>
            <returns><see langword="true"/> if the objects are the same command, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Specification.IPL.IPLCommandTemplate.op_Inequality(Specification.IPL.IPLCommandTemplate,Specification.IPL.IPLCommandTemplate)">
            <summary>
            Checks the inequality of 2 command objects.
            </summary>
            <param name="left">The lefthand object.</param>
            <param name="right">The righthand object.</param>
            <returns><see langword="true"/> if the objects are not the same command, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="T:Specification.IPL.IPLCommandType">
            <summary>
            An enum that represents the type of command.
            </summary>
        </member>
        <member name="F:Specification.IPL.IPLCommandType.Error">
            <summary>
            Error in parsing.
            </summary>
        </member>
        <member name="F:Specification.IPL.IPLCommandType.Unknown">
            <summary>
            Unknown command character.
            </summary>
        </member>
        <member name="F:Specification.IPL.IPLCommandType.Simple">
            <summary>
            No data assigned, command letter only.
            </summary>
        </member>
        <member name="F:Specification.IPL.IPLCommandType.Line">
            <summary>
            A line command, can store properties.
            </summary>
        </member>
        <member name="F:Specification.IPL.IPLCommandType.Prop">
            <summary>
            A property command, can be stored in a line command.
            </summary>
        </member>
        <member name="F:Specification.IPL.IPLCommandType.Text">
            <summary>
            Use 'Prop' and 'Field'.
            </summary>
        </member>
        <member name="F:Specification.IPL.IPLCommandType.FieldSet">
            <summary>
            Selects the indicated field.
            </summary>
        </member>
        <member name="F:Specification.IPL.IPLCommandType.PrintModeCmd">
            <summary>
            Indicates this could be a data field, and to do more checks.
            </summary>
        </member>
        <member name="F:Specification.IPL.IPLCommandType.FieldNext">
            <summary>
            Increments the field counter by 1 for the next command.
            </summary>
        </member>
        <member name="F:Specification.IPL.IPLCommandType.FieldData">
            <summary>
            A string of data defined in the print mode corresponding to a line command in the Program mode.
            </summary>
        </member>
        <member name="F:Specification.IPL.IPLCommandType.Qty">
            <summary>
            Sets a quantity.
            </summary>
        </member>
        <member name="F:Specification.IPL.IPLCommandType.Mode">
            <summary>
            A mode change command.
            </summary>
        </member>
        <member name="F:Specification.IPL.IPLCommandType.Advanced">
            <summary>
            A more complex command than usual. Doesn't fit into the pther categories.
            </summary>
        </member>
        <member name="F:Specification.IPL.IPLCommandType.SetFormat">
            <summary>
            Sets the format to be defined.
            </summary>
        </member>
        <member name="F:Specification.IPL.IPLCommandType.ClearFormat">
            <summary>
            Clears the defined format.
            </summary>
        </member>
        <member name="F:Specification.IPL.IPLCommandType.SelectFormat">
            <summary>
            Selects the format to be used.
            </summary>
        </member>
        <member name="T:Specification.IPL.IPLPrinterMode">
            <summary>
            The different possible printer modes.
            </summary>
        </member>
        <member name="F:Specification.IPL.IPLPrinterMode.None">
            <summary>
            No mode change.
            </summary>
        </member>
        <member name="F:Specification.IPL.IPLPrinterMode.Advanced">
            <summary>
            Advanced mode.
            </summary>
        </member>
        <member name="F:Specification.IPL.IPLPrinterMode.Emulation">
            <summary>
            Emulation mode.
            </summary>
        </member>
        <member name="F:Specification.IPL.IPLPrinterMode.Print">
            <summary>
            Print mode.
            </summary>
        </member>
        <member name="F:Specification.IPL.IPLPrinterMode.Program">
            <summary>
            Program mode.
            </summary>
        </member>
        <member name="F:Specification.IPL.IPLPrinterMode.TestAndService">
            <summary>
            TODO: Doc
            </summary>
        </member>
        <member name="F:Specification.IPL.IPLPrinterMode.PrintHeadLoading">
            <summary>
            TODO: Doc
            </summary>
        </member>
        <member name="F:Specification.IPL.IPLPrinterMode.DirectGraphics">
            <summary>
            TODO: Doc
            </summary>
        </member>
    </members>
</doc>
