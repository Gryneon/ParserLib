<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Parser.Byte</name>
    </assembly>
    <members>
        <member name="T:Parser.Byte.ByteParser">
            <summary>
            A parser that reads binary files.
            </summary>
            <param name="bytes">The raw file data.</param>
            <param name="spec">The spec to use.</param>
        </member>
        <member name="M:Parser.Byte.ByteParser.#ctor(System.Collections.Generic.IEnumerable{System.Byte},Parser.Spec)">
            <summary>
            A parser that reads binary files.
            </summary>
            <param name="bytes">The raw file data.</param>
            <param name="spec">The spec to use.</param>
        </member>
        <member name="P:Parser.Byte.ByteParser.OpCount">
            <summary>
            The total operation count.
            </summary>
        </member>
        <member name="P:Parser.Byte.ByteParser.CurrentOp">
            <summary>
            The current operation.
            </summary>
        </member>
        <member name="P:Parser.Byte.ByteParser.LastStatus">
            <summary>
            The last status from the last operation executed.
            </summary>
        </member>
        <member name="P:Parser.Byte.ByteParser.OpIndex">
            <summary>
            The current operation index.
            </summary>
        </member>
        <member name="P:Parser.Byte.ByteParser.ParseItem">
            <summary>
            The loaded binary file.
            </summary>
        </member>
        <member name="P:Parser.Byte.ByteParser.ByteObjects">
            <summary>
            The data stored from the file.
            </summary>
        </member>
        <member name="P:Parser.Byte.ByteParser.BytePos">
            <summary>
            The current position in the binary file.
            </summary>
        </member>
        <member name="P:Parser.Byte.ByteParser.Spec">
            <summary>
            The loaded specification.
            </summary>
        </member>
        <member name="M:Parser.Byte.ByteParser.Parse(System.Collections.ObjectModel.Collection{System.Byte})">
            <summary>
            Parses the provided binary data.
            </summary>
            <param name="bytes">The binary data.</param>
            <returns><see cref="F:Parser.OpStatus.Pass"/> if successful, or an error code.</returns>
        </member>
        <member name="M:Parser.Byte.ByteParser.Parse">
            <summary>
            Parses the provided binary data.
            </summary>
            <returns><see cref="F:Parser.OpStatus.Pass"/> if successful, or an error code.</returns>
        </member>
        <member name="T:Parser.Byte.Ops.ByteLoadDataOperationLoop">
            <summary>
            Represents an iterative loop, like to get objects from an archive, or read pixels. This one loads the count from the number of objects in the collection stored in the count key provided.
            </summary>
            <param name="varname"></param>
            <param name="count_of_varname"></param>
            <param name="ops_loop"></param>
        </member>
        <member name="M:Parser.Byte.Ops.ByteLoadDataOperationLoop.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{Parser.Byte.Ops.ByteOperation})">
            <summary>
            Represents an iterative loop, like to get objects from an archive, or read pixels. This one loads the count from the number of objects in the collection stored in the count key provided.
            </summary>
            <param name="varname"></param>
            <param name="count_of_varname"></param>
            <param name="ops_loop"></param>
        </member>
        <member name="T:Parser.Byte.Ops.ByteLoadIndexOperationLoop">
            <summary>
            Represents an iterative loop, like to get objects from an archive, or read pixels. This one loads the count from the count key provided.
            </summary>
            <param name="varname"></param>
            <param name="count_varname"></param>
            <param name="ops_loop"></param>
        </member>
        <member name="M:Parser.Byte.Ops.ByteLoadIndexOperationLoop.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{Parser.Byte.Ops.ByteOperation})">
            <summary>
            Represents an iterative loop, like to get objects from an archive, or read pixels. This one loads the count from the count key provided.
            </summary>
            <param name="varname"></param>
            <param name="count_varname"></param>
            <param name="ops_loop"></param>
        </member>
        <member name="T:Parser.Byte.Ops.ByteOperation">
            <summary>
            Base class for all byte operations. must expose parser, do not use other methods.
            </summary>
        </member>
        <member name="M:Parser.Byte.Ops.ByteOperation.DoOperation">
            <summary>
            Do not use.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Parser.Byte.Ops.ByteOperation.DoOperation(System.Object,System.Object@)">
            <summary>
            Do not use.
            </summary>
            <param name="input"></param>
            <param name="output"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Parser.Byte.Ops.ByteOperation.DoOperation(Parser.Byte.ByteParser)">
            <summary>
            Use this DoOperation method format.
            </summary>
            <param name="parser"></param>
            <returns></returns>
        </member>
        <member name="T:Parser.Byte.Ops.ByteOperationLoop">
            <summary>
            Represents an iterative loop, like to get objects from an archive, or read pixels.
            </summary>
            <param name="varname"></param>
            <param name="count">The key that determines the loop count.</param>
            <param name="ops_loop">The operations to preform in this loop.</param>
        </member>
        <member name="M:Parser.Byte.Ops.ByteOperationLoop.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{Parser.Byte.Ops.ByteOperation})">
            <summary>
            Represents an iterative loop, like to get objects from an archive, or read pixels.
            </summary>
            <param name="varname"></param>
            <param name="count">The key that determines the loop count.</param>
            <param name="ops_loop">The operations to preform in this loop.</param>
        </member>
    </members>
</doc>
